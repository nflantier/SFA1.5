package noelflantier.sfartifacts.common.helpers;

import java.util.Hashtable;


public enum PillarStructures {

	BASIC(//14blocks
		new Hashtable<String, String>(){{
			put("0_0_0", "1_0_0");//First Level
	    	put("1_0_0", "-1_0_0");
	    	put("-1_0_0", "0_0_1");
	    	put("0_0_1", "1_0_1");
	    	put("1_0_1", "-1_0_1");
	    	put("-1_0_1", "0_0_-1");
	    	put("0_0_-1", "1_0_-1");
	    	put("1_0_-1", "-1_0_-1");
	    	

	    	put("-1_0_-1", "0_1_0");
	    	put("0_1_0", "0_2_0");
	    	put("0_2_0", "0_3_0");
	    	put("0_3_0", "0_4_0");
	    	put("0_4_0", "0_5_0");
	    	put("0_5_0", "end");
		}}
	,
		new Hashtable<String, Integer[]>(){{
	    	put("0_0_-1", new Integer[]{2});// NORTH INTERFACE
	    	put("0_0_1", new Integer[]{3});// NORTH INTERFACE
		}}
	,
		new Hashtable<String, Integer[]>(){{
	    	put("0_0_-1", new Integer[]{2});// NORTH INTERFACE
	    	put("0_0_1", new Integer[]{3});// NORTH INTERFACE
		}}
    ,
		100000
	,
		-5
	,
		1F
	,
		-1
	,
		100000
	),	
	MEDIUM(//68blocks
			new Hashtable<String, String>(){{
				put("0_0_0", "1_0_0");//First Level
		    	put("1_0_0", "2_0_0");
		    	put("2_0_0", "-1_0_0");
		    	put("-1_0_0", "-2_0_0");
		    	put("-2_0_0", "0_0_1");
				put("0_0_1", "1_0_1");
		    	put("1_0_1", "2_0_1");
		    	put("2_0_1", "-1_0_1");
		    	put("-1_0_1", "-2_0_1");
		    	put("-2_0_1", "0_0_2");
				put("0_0_2", "1_0_2");
		    	put("1_0_2", "-1_0_2");
		    	put("-1_0_2", "0_0_-1");
				put("0_0_-1", "1_0_-1");
		    	put("1_0_-1", "2_0_-1");
		    	put("2_0_-1", "-1_0_-1");
		    	put("-1_0_-1", "-2_0_-1");
		    	put("-2_0_-1", "0_0_-2");
				put("0_0_-2", "1_0_-2");
		    	put("1_0_-2", "-1_0_-2");
		    	put("-1_0_-2", "0_1_0");
		    	
		    	put("0_1_0", "1_1_1");
		    	put("1_1_1", "-1_1_1");
		    	put("-1_1_1", "1_1_-1");
		    	put("1_1_-1", "-1_1_-1");
		    	put("-1_1_-1", "0_2_0");
		    	
		    	put("0_2_0", "1_2_1");
		    	put("1_2_1", "-1_2_1");
		    	put("-1_2_1", "1_2_-1");
		    	put("1_2_-1", "-1_2_-1");
		    	put("-1_2_-1", "0_3_0");
		    	
		    	put("0_3_0", "1_3_0");
		    	put("1_3_0", "2_3_0");
		    	put("2_3_0", "-1_3_0");
		    	put("-1_3_0", "-2_3_0");
		    	put("-2_3_0", "0_3_1");
		    	put("0_3_1", "1_3_1");
		    	put("1_3_1", "-1_3_1");
		    	put("-1_3_1", "0_3_2");
		    	put("0_3_2", "0_3_-1");
		    	put("0_3_-1", "1_3_-1");
		    	put("1_3_-1", "-1_3_-1");
		    	put("-1_3_-1", "0_3_-2");
		    	put("0_3_-2", "0_4_0");

		    	put("0_4_0", "1_4_0");
		    	put("1_4_0", "2_4_0");
		    	put("2_4_0", "-1_4_0");
		    	put("-1_4_0", "-2_4_0");
		    	put("-2_4_0", "0_4_1");
		    	put("0_4_1", "0_4_2");
		    	put("0_4_2", "0_4_-1");
		    	put("0_4_-1", "0_4_-2");
		    	put("0_4_-2", "0_5_0");

		    	put("0_5_0", "1_5_0");
		    	put("1_5_0", "-1_5_0");
		    	put("-1_5_0", "0_5_1");
		    	put("0_5_1", "0_5_-1");
		    	put("0_5_-1", "0_6_0");

		    	put("0_6_0", "1_6_0");
		    	put("1_6_0", "-1_6_0");
		    	put("-1_6_0", "0_6_1");
		    	put("0_6_1", "0_6_-1");
		    	put("0_6_-1", "0_7_0");
		    	
		    	put("0_7_0", "0_8_0");
		    	put("0_8_0", "0_9_0");
		    	put("0_9_0", "0_10_0");
		    	put("0_10_0", "0_11_0");
		    	put("0_11_0", "end");
			}}
		,
			new Hashtable<String, Integer[]>(){{
		    	put("0_1_0", new Integer[]{2,3,4,5});
		    	put("0_2_0", new Integer[]{2,3,4,5});
			}}
		,
			new Hashtable<String, Integer[]>(){{
		    	put("0_1_0", new Integer[]{2,3,4,5});
		    	put("0_2_0", new Integer[]{2,3,4,5});
			}}
	    ,
			5000000
		,
			-11
		,
			2.6F
		,
			-1
		,
			100000
		),
	/*COSTEFF(//87blocks
			new Hashtable<String, String>(){{
				put("0_0_0", "1_0_0");//First Level
		    	put("1_0_0", "-1_0_0");
		    	put("2_0_0", "0_0_1");
		    	put("-1_0_0", "1_0_1");
		    	put("-2_0_0", "-1_0_1");
		    	put("-3_0_0", "0_0_-1");
				put("0_0_1", "1_0_0");
				put("1_0_1", "1_0_0");
				put("2_0_1", "1_0_0");
		    	put("-1_0_1", "1_0_1");
		    	put("-2_0_1", "-1_0_1");
		    	put("-3_0_1", "0_0_-1");
				put("0_0_2", "1_0_0");
				put("1_0_2", "1_0_0");
				put("2_0_2", "1_0_0");
		    	put("-1_0_2", "1_0_1");
		    	put("-2_0_2", "-1_0_1");
		    	put("-3_0_2", "0_0_-1");
				put("0_0_3", "1_0_0");
				put("1_0_3", "1_0_0");
		    	put("-1_0_3", "1_0_1");
		    	put("-2_0_3", "-1_0_1");
				put("0_0_-1", "1_0_0");
				put("1_0_-1", "1_0_0");
				put("2_0_-1", "1_0_0");
		    	put("-1_0_-1", "1_0_1");
		    	put("-2_0_-1", "-1_0_1");
		    	put("-3_0_-1", "0_0_-1");
				put("0_0_-2", "1_0_0");
				put("1_0_-2", "1_0_0");
		    	put("-1_0_-2", "1_0_1");
		    	put("-2_0_-2", "-1_0_1");

				put("0_1_0", "1_0_0");
				put("1_1_0", "1_0_0");
		    	put("-1_1_0", "1_0_1");
		    	put("-2_1_0", "-1_0_1");
				put("0_1_1", "1_0_0");
				put("1_1_1", "1_0_0");
		    	put("-1_1_1", "1_0_1");
		    	put("-2_1_1", "-1_0_1");
				put("0_1_2", "1_0_0");
				put("1_1_2", "1_0_0");
		    	put("-1_1_2", "1_0_1");
		    	put("-2_1_2", "-1_0_1");
				put("0_1_-1", "1_0_0");
				put("1_1_-1", "1_0_0");
		    	put("-1_1_-1", "1_0_1");
		    	put("-2_1_-1", "-1_0_1");
		    	
		    	put("0_5_0", "end");
			}}
		,
			new Hashtable<String, Integer[]>(){{
		    	put("0_0_-1", new Integer[]{2});// NORTH INTERFACE
			}}
		,
			new Hashtable<String, Integer[]>(){{
		    	put("0_0_-1", new Integer[]{2});// NORTH INTERFACE
			}}
	    ,
			1000000
		,
			-5
		,
			1.5F
		,
			-1
		,
			100000
		),*/
	ADVANCED(//183
			new Hashtable<String, String>(){{
	    	put("0_0_0", "1_0_0");//First Level
	    	put("1_0_0", "2_0_0");
	    	put("2_0_0", "3_0_0");
	    	put("3_0_0", "-1_0_0");
	    	put("-1_0_0", "-2_0_0");
	    	put("-2_0_0", "-3_0_0");
	    	put("-3_0_0", "0_0_1");
	    	put("0_0_1", "1_0_1");
	    	put("1_0_1", "2_0_1");
	    	put("2_0_1", "3_0_1");
	    	put("3_0_1", "-1_0_1");
	    	put("-1_0_1", "-2_0_1");
	    	put("-2_0_1", "-3_0_1");
	    	put("-3_0_1", "0_0_2");
	    	put("0_0_2", "1_0_2");
	    	put("1_0_2", "2_0_2");
	    	put("2_0_2", "3_0_2");
	    	put("3_0_2", "-1_0_2");
	    	put("-1_0_2", "-2_0_2");
	    	put("-2_0_2", "-3_0_2");
	    	put("-3_0_2", "0_0_3");
	    	put("0_0_3", "1_0_3");
	    	put("1_0_3", "2_0_3");
	    	put("2_0_3", "-1_0_3");
	    	put("-1_0_3", "-2_0_3");
	    	put("-2_0_3", "0_0_-1");
	    	put("0_0_-1", "1_0_-1");
	    	put("1_0_-1", "2_0_-1");
	    	put("2_0_-1", "3_0_-1");
	    	put("3_0_-1", "-1_0_-1");
	    	put("-1_0_-1", "-2_0_-1");
	    	put("-2_0_-1", "-3_0_-1");
	    	put("-3_0_-1", "0_0_-2");
	    	put("0_0_-2", "1_0_-2");
	    	put("1_0_-2", "2_0_-2");
	    	put("2_0_-2", "3_0_-2");
	    	put("3_0_-2", "-1_0_-2");
	    	put("-1_0_-2", "-2_0_-2");
	    	put("-2_0_-2", "-3_0_-2");
	    	put("-3_0_-2", "0_0_-3");
	    	put("0_0_-3", "1_0_-3");
	    	put("1_0_-3", "2_0_-3");
	    	put("2_0_-3", "-1_0_-3");
	    	put("-1_0_-3", "-2_0_-3");
	    	put("-2_0_-3", "0_1_0");
	
	    	put("0_1_0", "1_1_0");//Second Level
	    	put("1_1_0", "2_1_0");
	    	put("2_1_0", "-1_1_0");
	    	put("-1_1_0", "-2_1_0");
	    	put("-2_1_0", "0_1_1");
	    	put("0_1_1", "1_1_1");
	    	put("1_1_1", "2_1_1");
	    	put("2_1_1", "-1_1_1");
	    	put("-1_1_1", "-2_1_1");
	    	put("-2_1_1", "0_1_2");
	    	put("0_1_2", "1_1_2");
	    	put("1_1_2", "2_1_2");
	    	put("2_1_2", "-1_1_2");//
	    	put("-1_1_2", "-2_1_2");
	    	put("-2_1_2", "0_1_-1");//
	    	put("0_1_-1", "1_1_-1");
	    	put("1_1_-1", "2_1_-1");
	    	put("2_1_-1", "-1_1_-1");
	    	put("-1_1_-1", "-2_1_-1");
	    	put("-2_1_-1", "0_1_-2");
	    	put("0_1_-2", "1_1_-2");
	    	put("1_1_-2", "2_1_-2");
	    	put("2_1_-2", "-1_1_-2");//
	    	put("-1_1_-2", "-2_1_-2");
	    	put("-2_1_-2", "0_2_0");//
	
	    	put("0_2_0", "1_2_0");//Third Level
	    	put("1_2_0", "-1_2_0");
	    	put("-1_2_0", "0_2_1");
	    	put("0_2_1", "1_2_1");
	    	put("1_2_1", "-1_2_1");
	    	//put("2_2_1", "-1_2_1");
	    	put("-1_2_1", "2_2_2");
	    	//put("-2_2_1", "1_2_2");
	    	//put("1_2_2", "2_2_2");
	    	put("2_2_2", "-2_2_2");
	    	//put("-1_2_2", "-2_2_2");
	    	put("-2_2_2", "0_2_-1");
	    	put("0_2_-1", "1_2_-1");
	    	put("1_2_-1", "-1_2_-1");
	    	//put("2_2_-1", "-1_2_-1");
	    	put("-1_2_-1", "2_2_-2");
	    	//put("-2_2_-1", "1_2_-2");
	    	//put("1_2_-2", "2_2_-2");
	    	put("2_2_-2", "-2_2_-2");
	    	//put("-1_2_-2", "-2_2_-2");
	    	put("-2_2_-2", "0_3_0");
	
	    	put("0_3_0", "1_3_0");//Fourth Level
	    	put("1_3_0", "2_3_0");
	    	put("2_3_0", "-1_3_0");
	    	put("-1_3_0", "-2_3_0");
	    	put("-2_3_0", "0_3_1");
	    	put("0_3_1", "1_3_1");
	    	put("1_3_1", "2_3_1");
	    	put("2_3_1", "-1_3_1");
	    	put("-1_3_1", "-2_3_1");
	    	put("-2_3_1", "0_3_2");
	    	put("0_3_2", "1_3_2");
	    	put("1_3_2", "-1_3_2");
	    	put("-1_3_2", "0_3_-1");
	    	put("0_3_-1", "1_3_-1");
	    	put("1_3_-1", "2_3_-1");
	    	put("2_3_-1", "-1_3_-1");
	    	put("-1_3_-1", "-2_3_-1");
	    	put("-2_3_-1", "0_3_-2");
	    	put("0_3_-2", "1_3_-2");
	    	put("1_3_-2", "-1_3_-2");
	    	put("-1_3_-2", "0_4_0");
	
	
	    	put("0_4_0", "1_4_0");//Fifth Level
	    	put("1_4_0", "-1_4_0");
	    	put("-1_4_0", "0_4_1");
	    	put("0_4_1", "1_4_1");
	    	put("1_4_1", "-1_4_1");
	    	put("-1_4_1", "0_4_-1");
	    	put("0_4_-1", "1_4_-1");
	    	put("1_4_-1", "-1_4_-1");
	    	put("-1_4_-1", "0_5_0");
	
	    	put("0_5_0", "1_5_0");//Sixth Level
	    	put("1_5_0", "-1_5_0");
	    	put("-1_5_0", "0_5_1");
	    	put("0_5_1", "1_5_1");
	    	put("1_5_1", "-1_5_1");
	    	put("-1_5_1", "0_5_-1");
	    	put("0_5_-1", "1_5_-1");
	    	put("1_5_-1", "-1_5_-1");
	    	put("-1_5_-1", "0_6_0");
	
	    	put("0_6_0", "1_6_0");//Seventh Level
	    	put("1_6_0", "-1_6_0");
	    	put("-1_6_0", "0_6_1");
	    	put("0_6_1", "1_6_1");
	    	put("1_6_1", "-1_6_1");
	    	put("-1_6_1", "0_6_-1");
	    	put("0_6_-1", "1_6_-1");
	    	put("1_6_-1", "-1_6_-1");
	    	put("-1_6_-1", "0_7_0");
	
	    	put("0_7_0", "1_7_0");//Eight Level
	    	put("1_7_0", "-1_7_0");
	    	put("-1_7_0", "0_7_1");
	    	put("0_7_1", "1_7_1");
	    	put("1_7_1", "-1_7_1");
	    	put("-1_7_1", "0_7_-1");
	    	put("0_7_-1", "1_7_-1");
	    	put("1_7_-1", "-1_7_-1");
	    	put("-1_7_-1", "0_8_0");
	
	    	put("0_8_0", "1_8_0");//Ninth Level
	    	put("1_8_0", "2_8_0");
	    	put("2_8_0", "-1_8_0");
	    	put("-1_8_0", "-2_8_0");
	    	put("-2_8_0", "0_8_1");
	    	put("0_8_1", "1_8_1");
	    	put("1_8_1", "-1_8_1");
	    	put("-1_8_1", "0_8_2");
	    	put("0_8_2", "0_8_-1");
	    	put("0_8_-1", "1_8_-1");
	    	put("1_8_-1", "-1_8_-1");
	    	put("-1_8_-1", "0_8_-2");
	    	put("0_8_-2", "0_9_0");
	
	    	put("0_9_0", "1_9_0");//Tenth Level
	    	put("1_9_0", "2_9_0");
	    	put("2_9_0", "-1_9_0");
	    	put("-1_9_0", "-2_9_0");
	    	put("-2_9_0", "0_9_1");
	    	put("0_9_1", "0_9_2");
	    	put("0_9_2", "0_9_-1");
	    	put("0_9_-1", "0_9_-2");
	    	put("0_9_-2", "0_10_0");
	
	    	put("0_10_0", "1_10_0");//Tenth Level
	    	put("1_10_0", "-1_10_0");
	    	put("-1_10_0", "0_10_1");
	    	put("0_10_1", "0_10_-1");
	    	put("0_10_-1", "0_11_0");
	
	    	put("0_11_0", "1_11_0");//Eleventh Level
	    	put("1_11_0", "-1_11_0");
	    	put("-1_11_0", "0_11_1");
	    	put("0_11_1", "0_11_-1");
	    	put("0_11_-1", "0_12_0");
	
	    	put("0_12_0", "1_12_0");//Twelthtetht Level
	    	put("1_12_0", "-1_12_0");
	    	put("-1_12_0", "0_12_1");
	    	put("0_12_1", "0_12_-1");
	    	put("0_12_-1", "0_13_0");//Thirteenneth Level
	
	    	put("0_13_0", "0_14_0");//Fourtyneth Level
	    	put("0_14_0", "0_15_0");//Fiftyneth Level
	    	put("0_15_0", "0_16_0");//Sixteenetth Level
	    	put("0_16_0", "0_17_0");//Seventeenneth Level
	    	put("0_17_0", "0_18_0");//Heighteeneth Level
	    	put("0_18_0", "end");
	    }}
	, 
	    new Hashtable<String,Integer[]>(){{
	    	put("1_2_0", new Integer[]{5});// EAST INTERFACE
	    	put("1_2_1", new Integer[]{5,3});// EAST INTERFACE
	    	put("1_2_-1", new Integer[]{5,2});// EAST INTERFACE
	    	
	    	put("-1_2_0", new Integer[]{4});// WEST INTERFACE
	    	put("-1_2_1", new Integer[]{4,3});// WEST INTERFACE
	    	put("-1_2_-1", new Integer[]{4,2});// WEST INTERFACE
	    	
	    	put("0_2_1", new Integer[]{3});// SOUTH INTERFACE
	    	
	    	put("0_2_-1", new Integer[]{2});// NORTH INTERFACE
	    }}
    ,
	    new Hashtable<String,Integer[]>(){{
	    	put("1_2_0", new Integer[]{5});// EAST INTERFACE
	    	put("1_2_1", new Integer[]{5,3});// EAST INTERFACE
	    	put("1_2_-1", new Integer[]{5,2});// EAST INTERFACE
	    	
	    	put("-1_2_0", new Integer[]{4});// WEST INTERFACE
	    	put("-1_2_1", new Integer[]{4,3});// WEST INTERFACE
	    	put("-1_2_-1", new Integer[]{4,2});// WEST INTERFACE
	    	
	    	put("0_2_1", new Integer[]{3});// SOUTH INTERFACE
	    	
	    	put("0_2_-1", new Integer[]{2});// NORTH INTERFACE
	    	
	    	put("0_18_0", new Integer[]{1});// UP INTERFACE
	    }}
    ,
    	100000000
    ,
    	-18
    ,
    	4.2F
    ,
    	19
    ,
    	1000000
    );
	
	public final Hashtable<String, String> structure;
	public final Hashtable<String, Integer[]> extract;
	public final Hashtable<String, Integer[]> recieve;
	public final int ID;
	public final int energyCapacity;
	public final float naturalRatio;
	public final int decY;
	public final int decYLR;
	public static int globalID = 0;
	public final int tankCapacity;
	
	private PillarStructures(Hashtable<String, String> s, Hashtable<String, Integer[]> e, Hashtable<String, Integer[]> r, int capacity, int decy, float nr, int decYLR, int tankcapacity){
		this.structure = s;
		this.extract = e;
		this.recieve = r;
		this.energyCapacity = capacity;
		this.naturalRatio = nr;
		this.ID = nextGlobalID();
		this.decY = decy;
		this.decYLR = decYLR;
		this.tankCapacity = tankcapacity;
	}
	
	private int nextGlobalID(){
		globalID++;
		return globalID;
	}
	
	public static PillarStructures getStructureFromId(int id){
		for(PillarStructures ps : PillarStructures.values()){
			if(ps.ID==id)return ps;
		}
		return null;
	} 
}
